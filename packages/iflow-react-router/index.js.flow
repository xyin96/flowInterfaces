import React from 'react';

declare module 'react-router' {
  declare type Hash = string;
  declare type Action = 'PUSH' | 'REPLACE' | 'POP';
  declare type Search = string;
  declare type Component = ReactClass<*> | string;
  declare type Location = {
    pathname: Pathname;
    search: QueryString;
    query: Query;
    state: LocationState;
    action: Action;
    key: LocationKey;
  };
  declare type LocationDescriptorObject = {
    pathname: Pathname;
    search: Search;
    query: Query;
    state: LocationState;
  };

  declare type LocationDescriptor = LocationDescriptorObject | Path;
  declare type LocationKey = string;

  declare type Params = Object;
  declare type Pathname = string;
  declare type Query = Object;
  declare type QueryString = string;

  declare type Path = string;

  declare type RouterState = {
    location: Location;
    routes: Array<RouteConfig>;
    params: Params;
    components: Array<Component>;
  };

  declare type RouteComponent = Component;
  
  declare type LocationState = ?Object;
  declare type RedirectFunction = (L: LocationDescriptor) => void;
  declare type EnterHook = (nextState: RouterState, replace: RedirectFunction, callback?: Function) => any;
  declare type LeaveHook = (prevState: RouterState) => any;
  declare type RouteConfig = {
    path?: string,
    pathName?: React$Element<*>|string,
    component?: RouteComponent,
    indexRoute?: RouteConfig,
    childRoutes?: Array<RouteConfig>,
    onEnter?: EnterHook,
    onLeave?: LeaveHook
  };
  declare type RouterProps = {
    routes?: RouteConfig,
    history?: any
  };
  declare type RouteHook = (nextLocation?: Location) => any;
  declare type LocationRouter = {
    push: (location: LocationDescriptor) => void;
    replace: (location: LocationDescriptor) => void;
    go: (n: number) => void;
    goBack: () => void;
    goForward: () => void;
    setRouteLeaveHook: (route: RouteConfig, hook: RouteHook) => Function;
    isActive: (location: LocationDescriptor, indexOnly: boolean) => void;
  };
  declare interface ReactRouter extends React.Component<*, *, *> {
    IndexRoute: React.Component<*, *, *>;
    Link: React.Component<*, *, *>;
    IndexLink: React.Component<*, *, *>;
    Redirect: React.Component<*, *, *>;
    IndexRedirect: React.Component<*, *, *>;
    Route: React.Component<*, RouteConfig, *>;
    Router: React.Component<*, RouterProps, *>;
    browserHistory: any;
    useRouterHistory: (historyFactory: Function) => (options: ?Object) => Object;
    match: Function;
    RouterContext: React.Component<*, *, *>;
    withRouter: (C: React.Component<*, *, *>) => React.Component<*, *, *>;
    createRoutes: (routes: React$Element<*>) => Array<Object>;
    formatPattern: (pattern: string, params: Object) => string;
  }
  declare var exports: ReactRouter;
}

declare module 'react-router/lib/PatternUtils' {
  declare var exports: any;
}

declare module 'history/lib/createBrowserHistory' {
  declare var exports: any;
}
